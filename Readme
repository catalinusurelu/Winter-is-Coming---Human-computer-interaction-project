README

PROIECT INTERACTIUNEA OM-CALCULATOR
ECHIPA: TALENT
MEMBRII ECHIPA: Dragan Dan-Stefan
		    Iordache Catalin
		    Usurelu Catalin Constantin

Implementare front-end

	Partea de front-end a fost implementata cu ajutorul HTML si bootstrap:

	Pentru inceput am facut pagina principala: index.html. Mai intai am organizat pagina
	cu ajutorul grid-ului definit in bootstrap. Apoi au urmat:
		- bara de navigatie (bootstrap: navbar) care contine titlul proiectului, buton de homepage (index.html)
		  form de cautare si buton de declansare a cautarii si numele utilizatorului alaturi de rating-ul acestuia.
		  Totodata la apasarea pe numele utilizatorului se declanseaza un dropdown care permite prin alte doua
		  butoane accesarea contului sau sign-out.
		- butoanele de creeare a evenimentelor in functie de tipul acestuia: masina, trotuar sau alee inzapezita.
		  La actionarea unuia dintre acestea se apeleaza un element bootstrap modal, care permite completearea
		  unor informatii: Titlul proiectului, un mesaj, adaugarea unei fotografii, check-in (google-maps) si postarea.
		- mapa google, care indica locatia ip-ului si evenimentele din jur, cu ajutorul google-map-canvas.
		- in partea dreapta apar doua panouri (bootstrap: panel), unul care indica clasamentul user-ilor si altor clasamentul
		   evenimentelor.
		 - in josul paginii a fost construit un alt panou, care lucreaza ca o consola unde vor aparea evenimentele noi create
		   din vecinatate.

	Pagina evenimentului (event.html) : care contine informatiile despre eveniment, alaturi de statusul acestuia - In progress/Done.
	Totodata au fost construite 3 butoane: rate +1, rate -1 si attend. In partea dreapta se afla un panou cu persoanele care participa
	la acest eveniment.

	Pagina userului (user.html): Contine informatiile despre user alaturi de doua butoane care permit aprecierea sau nu a userului.
	In partea dreapta sa afla doua panouri care indica evenimentele create de user si evenimentele la care participa.

	Pagina de signup (signup.html) si pagina de login (login.html) permit logarea sau inscrierea pe site. Informatiile sunt pastrare
	in baza de date.


	Designul a fost facut cu ajutorul css, iar toata implementarea se gaseste in fisierul style.css.

Implementare back-end

	Partea de back-end este reprezentarea de servicii REST + un web server
	NodeJS realizat folosind frameworkul Express pentru fisiere statice (HTML,
	JavaScript, imagini etc.).

	Tehnologii principale folosite de serviciile REST:
		- Python.
		- Flask.
		- SQLAlchemy drept ORM + folosirea unei baze de date SQLite.


	Tabelele din baza de date (schema):
		1) User:
			id = db.Column(db.Integer, primary_key=True)
			first_name = db.Column(db.String(127), index=True)
			last_name = db.Column(db.String(127), index=True)
			email = db.Column(db.String(127), index=True, unique=True)
			upvotes = db.Column(db.Integer, index=True)
			password = db.Column(db.String(32))
			image_url = db.Column(db.String(1024))
			attending = "events associated with the user"

		2) Event:
			id = db.Column(db.Integer, primary_key=True)
			name = db.Column(db.String(127), index=True)
			latitude = db.Column(db.Float, index=True)
			longitude = db.Column(db.Float, index=True)
			upvotes = db.Column(db.Integer, index=True)
			event_type = db.Column(db.String(32))
			event_status = db.Column(db.String(32))
			image_url = db.Column(db.String(1024))
			create_date = db.Column(db.DateTime)
			creator_id = db.Column(db.Integer, db.ForeignKey('user.id'))

	Endpointurile pentru serviciile REST (pot fi accessate cu root-ul
	http://128.199.38.110:5000/):
		- /users -> suporta crearea unui nou user (POST) + listarea tuturor
		            userilor (GET).
		- /events -> suporta crearea unui nou event (POST) + listarea tuturor
		             eventurilor (GET).

		- /close_event/<int:event_id> -> marcheaza un event ca fiind terminat;
										 se foloseste metoda POST fara niciun
										 continut (acesta va fi ignorat).
		- /users/<int:user_id>/events -> listarea (GET) tutoror evenimentul
		                                 pe carea user-ul identificat prin
		                                 user_id le-a deschis sau la care a
		                                 participat.
		- /top_events -> listeaza (GET) evenimentele ordonate dupa numarul de
		                  upvote-uri.
		- /to_users -> listeaza (GET) userii ordonati dupa numarul de
		                  upvote-uri.


		Exemple de JSON-uri care reprezinta useri si evenimente:
		User:
		{
			"first_name": "Ion",
			"last_name": "Andrei",
			"email": "yo@me2",
			"upvotes": 23,
			"password": "111"
		}

		Event:
		{
			"name": "New event",
			"latitude": 45.32,
			"longitude": 23.33,
			"upvotes": 33,
			"event_type" : "street",
			"event_status" : "started",
			"creator_id": 1
		}

		Aceste JSON-uri pot fi folosite impreuna cu un client REST (extensia
		Postman pentru Google Chrome) + apeluri POST pentru a crea evenimente,
		useri noi.

		Atentie! Toate request-urile trebuie sa contina header-ul html
		content-type: application/json.

		De asemenea toate requesturile se fac Cross-Origin deci exista
		un risc implicit de securitate!

		Exemplu POST:

		endpoint -> http://128.199.38.110:5000/users
		Content-Type: application/json

		Contents:
		{
			"first_name": "Ion",
			"last_name": "Andrei",
			"email": "yo@me2",
			"upvotes": 23,
			"password": "111"
		}

	Legare front-end <--> back-end:
		Aceasta se realizeaza folosind apeluri AJAX prin JQuery si de asemenea
	este folosit AngularJS pentru afisarea dinamica a listelor de useri,
	evenimente etc.

Totul ar trebui sa functioneze out of the box, dar in caz ca se doreste
reinstalarea pachetelor python folosite, urmati pasii:

Install python3 if not already included in your distribution

sudo apt-get install python-virtualenv
alias python=python3
sudo virtualenv flask -p python
sudo su
flask/bin/pip install flask
flask/bin/pip install flask-login
flask/bin/pip install flask-openid
flask/bin/pip install flask-mail
flask/bin/pip install flask-sqlalchemy
flask/bin/pip install sqlalchemy-migrate
flask/bin/pip install flask-whooshalchemy
flask/bin/pip install flask-wtf
flask/bin/pip install flask-babel
flask/bin/pip install guess_language
flask/bin/pip install flipflop
flask/bin/pip install coverage
flask/bin/pip install -U flask-cors

De asemenea pentru NodeJS express:
	npm install -g express